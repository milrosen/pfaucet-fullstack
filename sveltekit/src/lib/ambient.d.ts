type Article = { title: any; thumbnail: string; link: string; blurb: any; paragraph: any; content: any; date: any; meta?: any; authors: any}
type Issue = { 
	title: any; 
	thumbnail: string, 
	id: string, 
	date: any
}
type First_Issue = { 
	title: any; 
	thumbnail: string; 
	link: string; 
	blurb: any; 
	paragraph: any; 
	meta?: any; 
	authors: any
}
type Add_Issue = {
  title: string;
  blurb: string;
  paragraph: string;
}

type Section = {
	type: 'image'|'paragraph'|'title'|'layout';
	content: string|Section[];
}
type Staff = {
	name: string,
	title: string,
	degree: string,
	headshot: string,
	hometown: string,
	date_started: string,
	description: string,
}
type Email = {
	contact_name: string,
	contact_email: string,
	message: string
}


// ** AUTOGENERATED BY SUPABASE **//

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      articles: {
        Row: {
          authors: string | null
          blurb: string | null
          content: string | null
          created: string | null
          date: string | null
          id: string
          issue: string | null
          paragraph: string | null
          thumbnail: string | null
          title: string | null
          updated: string | null
        }
        Insert: {
          authors?: string | null
          blurb?: string | null
          content?: string | null
          created?: string | null
          date?: string | null
          id: string
          issue?: string | null
          paragraph?: string | null
          thumbnail?: string | null
          title?: string | null
          updated?: string | null
        }
        Update: {
          authors?: string | null
          blurb?: string | null
          content?: string | null
          created?: string | null
          date?: string | null
          id?: string
          issue?: string | null
          paragraph?: string | null
          thumbnail?: string | null
          title?: string | null
          updated?: string | null
        }
        Relationships: []
      }
      articles_content: {
        Row: {
          content: Json | null
          created: string | null
          id: string
          images: Json | null
          title: string | null
          updated: string | null
        }
        Insert: {
          content?: Json | null
          created?: string | null
          id: string
          images?: Json | null
          title?: string | null
          updated?: string | null
        }
        Update: {
          content?: Json | null
          created?: string | null
          id?: string
          images?: Json | null
          title?: string | null
          updated?: string | null
        }
        Relationships: []
      }
      contributers: {
        Row: {
          created: string | null
          editor_in_chief: string | null
          editors_and_executives: string | null
          id: string
          illustrators: string | null
          publications_director: string | null
          updated: string | null
          writers: string | null
        }
        Insert: {
          created?: string | null
          editor_in_chief?: string | null
          editors_and_executives?: string | null
          id: string
          illustrators?: string | null
          publications_director?: string | null
          updated?: string | null
          writers?: string | null
        }
        Update: {
          created?: string | null
          editor_in_chief?: string | null
          editors_and_executives?: string | null
          id?: string
          illustrators?: string | null
          publications_director?: string | null
          updated?: string | null
          writers?: string | null
        }
        Relationships: []
      }
      issues: {
        Row: {
          blurb: string | null
          contributors: string | null
          created: string | null
          id: string
          issue: string | null
          paragraph: string | null
          special: string | null
          updated: string | null
        }
        Insert: {
          blurb?: string | null
          contributors?: string | null
          created?: string | null
          id: string
          issue?: string | null
          paragraph?: string | null
          special?: string | null
          updated?: string | null
        }
        Update: {
          blurb?: string | null
          contributors?: string | null
          created?: string | null
          id?: string
          issue?: string | null
          paragraph?: string | null
          special?: string | null
          updated?: string | null
        }
        Relationships: []
      }
      issues_content: {
        Row: {
          created: string | null
          date: string | null
          id: string
          issue_pdf: string | null
          thumbnail: string | null
          title: string | null
          updated: string | null
        }
        Insert: {
          created?: string | null
          date?: string | null
          id: string
          issue_pdf?: string | null
          thumbnail?: string | null
          title?: string | null
          updated?: string | null
        }
        Update: {
          created?: string | null
          date?: string | null
          id?: string
          issue_pdf?: string | null
          thumbnail?: string | null
          title?: string | null
          updated?: string | null
        }
        Relationships: []
      }
      staff: {
        Row: {
          created_at: string
          date_started: string | null
          degree: string | null
          description: string | null
          headshot: string | null
          hometown: string | null
          id: number
          name: string | null
          title: string | null
        }
        Insert: {
          created_at?: string
          date_started?: string | null
          degree?: string | null
          description?: string | null
          headshot?: string | null
          hometown?: string | null
          id?: number
          name?: string | null
          title?: string | null
        }
        Update: {
          created_at?: string
          date_started?: string | null
          degree?: string | null
          description?: string | null
          headshot?: string | null
          hometown?: string | null
          id?: number
          name?: string | null
          title?: string | null
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (Database["public"]["Tables"] & Database["public"]["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (Database["public"]["Tables"] &
      Database["public"]["Views"])
  ? (Database["public"]["Tables"] &
      Database["public"]["Views"])[PublicTableNameOrOptions] extends {
      Row: infer R
    }
    ? R
    : never
  : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
  ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
      Insert: infer I
    }
    ? I
    : never
  : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
  ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
      Update: infer U
    }
    ? U
    : never
  : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof Database["public"]["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof Database["public"]["Enums"]
  ? Database["public"]["Enums"][PublicEnumNameOrOptions]
  : never
